plugins {
    id 'java-library'
    id 'io.freefair.lombok' version '8.7.1'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'org.ajoberstar.git-publish' version '4.2.0'
    id 'maven-publish'
    id 'signing'
}

group = findProperty("GROUP") ?: "io.github.martwebber"
version = findProperty("VERSION_NAME") ?: "1.0.7"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

dependencies {
    api 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

spotless {
    java {
        googleJavaFormat('1.19.2')
        target 'src/**/*.java'
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.withType(Javadoc).configureEach {
    failOnError = false
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xlint:all", "-Werror", "-Xlint:-processing"]
}

// ======================================================
//  Maven Central Publishing (Gradle-native)
// ======================================================

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name.set(findProperty("POM_NAME"))
                description.set(findProperty("POM_DESCRIPTION"))
                url.set(findProperty("POM_URL"))
                inceptionYear.set(findProperty("POM_INCEPTION_YEAR"))

                licenses {
                    license {
                        name.set(findProperty("POM_LICENCE_NAME"))
                        url.set(findProperty("POM_LICENCE_URL"))
                        distribution.set(findProperty("POM_LICENCE_DIST"))
                    }
                }

                developers {
                    developer {
                        id.set(findProperty("POM_DEVELOPER_ID"))
                        name.set(findProperty("POM_DEVELOPER_NAME"))
                        email.set(findProperty("POM_DEVELOPER_EMAIL"))
                        organization.set(findProperty("POM_ORGANIZATION_NAME"))
                        organizationUrl.set(findProperty("POM_ORGANIZATION_URL"))
                    }
                }

                scm {
                    url.set(findProperty("POM_SCM_URL"))
                    connection.set(findProperty("POM_SCM_CONNECTION"))
                    developerConnection.set(findProperty("POM_SCM_DEV_CONNECTION"))
                }
            }
        }
    }

    repositories {
        maven {
            name = "mavenCentral"
            url = uri(
                    version.endsWith("SNAPSHOT")
                            ? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                            : "https://central.sonatype.com/api/v1/publish"
            )

            credentials {
                username = findProperty("mavenCentralUsername") ?: System.getenv("CENTRAL_PORTAL_USERNAME")
                password = findProperty("mavenCentralPassword") ?: System.getenv("CENTRAL_PORTAL_TOKEN")
            }
        }
    }
}

// ======================================================
// ‚úÖ Generate .md5 and .sha1 checksums after publishing
// ======================================================
import java.security.MessageDigest

tasks.register('generateChecksums') {
    dependsOn 'publishToMavenLocal'

    doLast {
        def artifactFiles = fileTree(dir: "$buildDir/libs", include: "*.jar").files +
                fileTree(dir: "$buildDir/publications/mavenJava", include: ["*.pom", "*.module"]).files

        println "üîë Generating checksums for ${artifactFiles.size()} files..."

        artifactFiles.each { file ->
            ["MD5", "SHA1"].each { algo ->
                def digest = MessageDigest.getInstance(algo)
                file.withInputStream { is ->
                    byte[] buffer = new byte[8192]
                    int bytesRead
                    while ((bytesRead = is.read(buffer)) != -1) {
                        digest.update(buffer, 0, bytesRead)
                    }
                }
                def hash = digest.digest().collect { String.format("%02x", it) }.join()
                def checksumFile = new File("${file.absolutePath}.${algo.toLowerCase()}")
                checksumFile.text = "${hash}  ${file.name}"
                println "‚úÖ ${file.name}.${algo.toLowerCase()} -> ${hash}"
            }
        }
    }
}


// ======================================================
//  Signing Configuration (executes before upload)
// ======================================================

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

tasks.withType(Sign).configureEach {
    onlyIf {
        def keyPresent = findProperty("signing.keyId") || findProperty("signing.gnupg.keyName")
        if (!keyPresent) {
            logger.lifecycle("‚ö†Ô∏è No signing key found. Skipping signing.")
        }
        return keyPresent
    }
}

// ensure signing happens *before* uploading
tasks.withType(PublishToMavenRepository).configureEach {
    dependsOn(tasks.withType(Sign))
}

// ======================================================
//  CI convenience
// ======================================================

tasks.register('ci') {
    group = "verification"
    description = "Runs spotless check, tests, and coverage for CI pipelines"
    dependsOn 'spotlessCheck', 'test', 'jacocoTestReport'
}

tasks.register('bundleForCentral', Zip) {
    dependsOn 'publishToMavenLocal'
    archiveFileName.set("${project.name}-${project.version}.zip")
    destinationDirectory.set(layout.buildDirectory.dir("distributions"))

    doFirst {
        println "üì¶ Collecting artifacts from local Maven repo..."
    }

    def groupPath = project.group.toString().replace('.', '/')
    def artifactId = project.name
    def versionName = project.version.toString()

    from("${System.getProperty('user.home')}/.m2/repository/${groupPath}/${artifactId}/${versionName}") {
        include "*"
        into("${groupPath}/${artifactId}/${versionName}")
    }
}
