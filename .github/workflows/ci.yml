name: CI

on:
  workflow_dispatch: {}
  push:
    branches:
      - master
      - develop
      - beta
      - sdk-release/**
      - feature/**
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    branches:
      - master
      - develop
      - beta
      - private-preview
      - sdk-release/**
      - feature/**

jobs:
  # ======================================================
  # BUILD STAGE
  # ======================================================
  build:
    name: Build
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2

      - name: Setup Java (Build JVM)
        id: setup-build-jre
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set JAVA_HOME for Gradle
        run: |
          echo "JAVA_HOME=${{ steps.setup-build-jre.outputs.path }}" >> $GITHUB_ENV
          echo "PATH=${{ steps.setup-build-jre.outputs.path }}/bin:$PATH" >> $GITHUB_ENV

      - name: Display Java version
        run: java -version

      - name: Spotless check
        run: ./gradlew spotlessCheck --no-daemon

      - name: Build artifacts and Javadoc
        run: ./gradlew assemble javadoc --no-daemon

  # ======================================================
  # TEST STAGE
  # ======================================================
  test:
    name: Test
    runs-on: ubuntu-24.04
    needs: build

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - "8"
          - "11"
          - "17"
          - "21"

    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2

      # Use Java 17 for Gradle (plugin classpath)
      - name: Setup Build JVM (Gradle)
        id: setup-build-jre
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Use matrix JVM for running tests
      - name: Setup Test JVM
        id: setup-test-jre
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}

      - name: Export Java Environments
        run: |
          echo "JAVA_HOME=${{ steps.setup-build-jre.outputs.path }}" >> $GITHUB_ENV
          echo "JAVA_TEST_HOME=${{ steps.setup-test-jre.outputs.path }}" >> $GITHUB_ENV
          echo "PATH=${{ steps.setup-build-jre.outputs.path }}/bin:$PATH" >> $GITHUB_ENV

      - name: Display versions
        run: |
          ./gradlew --version
          echo "Test JVM: $JAVA_TEST_HOME"
          $JAVA_TEST_HOME/bin/java -version

      - name: Run tests
        run: ./gradlew test jacocoTestReport --no-daemon

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.java-version }}
          path: build/reports/tests/test

  # ======================================================
  # PUBLISH STAGE
  # ======================================================
  publish:
    name: Publish to Sonatype
    if: >-
      ((github.event_name == 'workflow_dispatch') || (github.event_name == 'push')) &&
      startsWith(github.ref, 'refs/tags/v')
    needs: [build, test]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        id: setup-jre
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Import GPG key
        run: |
          echo "$GPG_SIGNING_PRIVKEY" | base64 --decode | gpg --import --batch --yes --pinentry-mode loopback --passphrase "$GPG_SIGNING_PASSPHRASE"
        env:
          GPG_SIGNING_PRIVKEY: ${{ secrets.GPG_SIGNING_PRIVKEY }}
          GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}

      - name: Publish artifacts
        run: |
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository \
            -Psigning.gnupg.keyName=$GPG_SIGNING_KEYID \
            -Psigning.gnupg.passphrase=$GPG_SIGNING_PASSPHRASE \
            -PnexusUsername=$NEXUS_USERNAME \
            -PnexusPassword=$NEXUS_PASSWORD
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          GPG_SIGNING_KEYID: ${{ secrets.GPG_SIGNING_KEYID }}
          GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}

  # ======================================================
  # DOCS STAGE
  # ======================================================
  publish-docs:
    name: Publish Javadocs
    if: >-
      ((github.event_name == 'workflow_dispatch') || (github.event_name == 'push')) &&
      startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.ref, 'beta')
    needs: [build, test]
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Publish Javadocs
        run: ./gradlew gitPublishPush --stacktrace --info
        env:
          GRGIT_USER: ${{ github.actor }}
          GRGIT_PASS: ${{ secrets.GITHUB_TOKEN }}

  # ======================================================
  # COMPAT STAGE
  # ======================================================
  compat:
    name: API Compatibility Check
    runs-on: ubuntu-24.04
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Clone japi-compliance-checker
        run: git clone https://github.com/lvc/japi-compliance-checker ../japi-compliance-checker

      - name: Build HEAD JAR
        run: ./gradlew jar --no-daemon

      - name: Copy new JAR
        run: mv build/libs/*.jar ../japi-compliance-checker/new.jar

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Build base JAR
        run: ./gradlew jar --no-daemon

      - name: Copy old JAR
        run: mv build/libs/*.jar ../japi-compliance-checker/old.jar

      - name: Run JAPI Compliance Checker
        run: |
          pushd ../japi-compliance-checker
          perl japi-compliance-checker.pl -old old.jar -new new.jar --lib=mpesa-java-sdk || echo "failed" > compliance_failure
          popd
          mv ../japi-compliance-checker/compat_reports/mpesa-java-sdk/*/compat_report.html report.html

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: JAPI Compliance Report
          path: report.html

      - name: Fail on compatibility issues
        run: |
          if [ -f "../japi-compliance-checker/compliance_failure" ]; then
            echo "⚠️ Compatibility problems detected! See artifact for details."
            exit 1
          fi
