name: CI

on:
  workflow_dispatch: {}
  push:
    branches:
      - master
      - develop
      - beta
      - sdk-release/**
      - feature/**
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    branches:
      - master
      - develop
      - beta
      - private-preview
      - sdk-release/**
      - feature/**

jobs:
  # ======================================================
  # BUILD STAGE
  # ======================================================
  build:
    name: Build
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2

      - name: Setup Java (Build JVM)
        id: setup-build-jre
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set JAVA_HOME for Gradle
        run: |
          echo "JAVA_HOME=${{ steps.setup-build-jre.outputs.path }}" >> $GITHUB_ENV
          echo "PATH=${{ steps.setup-build-jre.outputs.path }}/bin:$PATH" >> $GITHUB_ENV

      - name: Display Java version
        run: java -version

      - name: Spotless check
        run: ./gradlew spotlessCheck --no-daemon

      - name: Build artifacts and Javadoc
        run: ./gradlew assemble javadoc --no-daemon

  # ======================================================
  # TEST STAGE
  # ======================================================
  test:
    name: Test
    runs-on: ubuntu-22.04
    needs: build

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - "8"
          - "11"
          - "17"
          - "21"

    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2

      # Use Java 17 for Gradle (plugin classpath)
      - name: Setup Build JVM (Gradle)
        id: setup-build-jre
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Use matrix JVM for running tests
      - name: Setup Test JVM
        id: setup-test-jre
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}

      - name: Export Java Environments
        run: |
          echo "JAVA_HOME=${{ steps.setup-build-jre.outputs.path }}" >> $GITHUB_ENV
          echo "JAVA_TEST_HOME=${{ steps.setup-test-jre.outputs.path }}" >> $GITHUB_ENV
          echo "PATH=${{ steps.setup-build-jre.outputs.path }}/bin:$PATH" >> $GITHUB_ENV

      - name: Display versions
        run: |
          ./gradlew --version
          echo "Test JVM: $JAVA_TEST_HOME"
          $JAVA_TEST_HOME/bin/java -version

      - name: Run tests
        run: ./gradlew test jacocoTestReport --no-daemon

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.java-version }}
          path: build/reports/tests/test

  # ======================================================
  # PUBLISH STAGE ‚Äî Central Portal (2025+)
  # ======================================================
  publish:
    name: Publish to Maven Central (Central Portal)
    if: >-
      ((github.event_name == 'workflow_dispatch') || (github.event_name == 'push')) &&
      startsWith(github.ref, 'refs/tags/v')
    needs: [ build, test ]
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Configure GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        run: |
          echo "üîë Importing private key..."
          echo "$GPG_PRIVATE_KEY" | gpg --import --batch --yes
          echo "üîë Importing public key..."
          echo "$GPG_PUBLIC_KEY" | gpg --import --batch --yes
          echo "‚úÖ Listing imported keys..."
          gpg --list-secret-keys --keyid-format=long

      - name: Build, sign, and bundle for Maven Central
        env:
          GPG_SIGNING_KEYID: ${{ secrets.GPG_SIGNING_KEYID }}
          GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}
        run: |
          echo "üèóÔ∏è Building and signing project..."
          ./gradlew clean build sign bundleForCentral \
            -Psigning.gnupg.keyName=$GPG_SIGNING_KEYID \
            -Psigning.gnupg.passphrase=$GPG_SIGNING_PASSPHRASE \
            -Psigning.gnupg.homeDir=$HOME/.gnupg \
            --no-daemon --stacktrace

      - name: Publish to local Maven repo
        run: |
          echo "üì¶ Publishing to local Maven repository..."
          ./gradlew publishToMavenLocal --no-daemon --stacktrace

      - name: Regenerate checksums
        run: |
          echo "üîÑ Regenerating checksums..."
          VERSION="${GITHUB_REF_NAME#v}"
          REPO_PATH="$HOME/.m2/repository/io/github/openpaydev/mpesa-sdk-java/$VERSION"
          if [[ -d "$REPO_PATH" ]]; then
            cd "$REPO_PATH"
            for f in *.jar *.module *.pom; do
              if [[ -f "$f" ]]; then
                md5sum "$f" | awk '{print $1}' > "$f.md5"
                sha1sum "$f" | awk '{print $1}' > "$f.sha1"
              fi
            done
            cd - >/dev/null
          else
            echo "‚ö†Ô∏è Repository path not found: $REPO_PATH"
          fi

      - name: Rebuild bundle for upload
        run: |
          echo "üì¶ Rebuilding upload bundle..."
          VERSION="${GITHUB_REF_NAME#v}"
          REPO_PATH="$HOME/.m2/repository/io/github/openpaydev/mpesa-sdk-java/$VERSION"
          
          if [[ ! -d "$REPO_PATH" ]]; then
            echo "‚ùå Repository path not found: $REPO_PATH"
            exit 1
          fi
          
          cd "$HOME/.m2/repository"
          
          BUNDLE_NAME="mpesa-sdk-java-${VERSION}.zip"
          BUNDLE_PATH="$HOME/${BUNDLE_NAME}"
          
          echo "üì¶ Zipping contents into ${BUNDLE_NAME}..."
          zip -r "${BUNDLE_PATH}" "io/github/openpaydev/mpesa-sdk-java/${VERSION}/"
          
          cd - >/dev/null
          ls -lh "${BUNDLE_PATH}"
          
          echo "‚úÖ Bundle created at ${BUNDLE_PATH}"

      - name: Upload to Central Portal
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_PASSWORD: ${{ secrets.CENTRAL_PASSWORD }}
        run: |
          echo "üöÄ Uploading to Sonatype Central Portal..."
          VERSION="${GITHUB_REF_NAME#v}"
          BUNDLE_PATH="$HOME/mpesa-sdk-java-${VERSION}.zip"
          
          if [[ ! -f "$BUNDLE_PATH" ]]; then
            echo "‚ùå Bundle not found at $BUNDLE_PATH"
            exit 1
          fi
          
          TOKEN=$(echo -n "$CENTRAL_USERNAME:$CENTRAL_PASSWORD" | base64)
          
          curl --fail --show-error --silent \
            --request POST \
            --header "Authorization: Basic $TOKEN" \
            --form bundle=@"$BUNDLE_PATH" \
            "https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC"
          
          echo "‚úÖ Publish completed successfully!"

  # ======================================================
  # COMPAT STAGE
  # ======================================================
  compat:
    name: API Compatibility Check
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Clone japi-compliance-checker
        run: git clone https://github.com/lvc/japi-compliance-checker ../japi-compliance-checker

      - name: Build HEAD JAR
        run: ./gradlew jar --no-daemon

      - name: Copy new JAR
        run: mv build/libs/*.jar ../japi-compliance-checker/new.jar

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Build base JAR
        run: ./gradlew jar --no-daemon

      - name: Copy old JAR
        run: mv build/libs/*.jar ../japi-compliance-checker/old.jar

      - name: Run JAPI Compliance Checker
        run: |
          pushd ../japi-compliance-checker
          perl japi-compliance-checker.pl -old old.jar -new new.jar --lib=mpesa-sdk-java || echo "failed" > compliance_failure
          popd
          mv ../japi-compliance-checker/compat_reports/mpesa-sdk-java/*/compat_report.html report.html

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: JAPI Compliance Report
          path: report.html

      - name: Fail on compatibility issues
        run: |
          if [ -f "../japi-compliance-checker/compliance_failure" ]; then
            echo "‚ö†Ô∏è Compatibility problems detected! See artifact for details."
            exit 1
          fi
